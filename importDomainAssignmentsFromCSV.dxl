string myEscape(string str) {
	int str_index;
	Buffer escaped = create;
	escaped = "";

	for (str_index = 0; str_index < length(str); str_index++) {
		char c = str[str_index];
		if (c == '\n') {
			escaped += "\\n";
		} else if (c == '\t') {
			escaped += "\\t";
		} else if (c == '"') {
			escaped += "\\\"";
		} else if (c == '\\') {
			escaped += "\\\\";
		} else if (c == '\b') {
			escaped += "\\b";
		} else if (c == '\f') {
			escaped += "\\f";
		} else if (c == '\r') {
			escaped += "\\r";
		} else {
			escaped += c;
		}
	}

	return stringOf(escaped);
}

string getFileName() {
	DB fileNameBox = create(current, "Select Destination to import from", styleCentered|styleFixed);
	label(fileNameBox , "Please enter the file path");
	DBE fn = fileName(fileNameBox , "Import-File", "", "*.csv", "CSV", false);
	block fileNameBox;
	string fileName = get(fn);
	return fileName;
}

Skip mySplit(string s, string delimiter, bool onlyOneSplit) {
	Skip ret = create;
	Buffer buf = create;
	buf = "";
	int i;
	int skipIndex = 0;
	int len = length(s);
	
	for (i = 0; i < len; i++) {
		string tmp = s[i:i];
		if (tmp == delimiter) {
			put(ret, skipIndex++, stringOf(buf));
			buf = "";
			if (onlyOneSplit) {
				buf = s[i + 1:len];
				i = len;
			}
		} else {
			buf += tmp;
		}
	}
	put(ret, skipIndex++, stringOf(buf));
	delete buf;
	return ret;
}

pragma runLim, 0

Object o
Module m = current Module;


string myFileName;
myFileName = getFileName();
Stream input = null;
Buffer oneLine = create;

int iLine = 0 

Skip classifiedList = create;

int startTotal = getTickCount_();
if (canOpenFile(myFileName, false)) 
{ 
	input = read(myFileName);
	while (!end input) 
	{ 
		// Read file line by line 
		input >= oneLine;
		string myLine;
		myLine = stringOf(oneLine);
		put(classifiedList, iLine, myLine);
		iLine++;
	}
	
	int i = 0;
	for o in m do {
		string objId = identifier(o);
		string myLine2;
		string csvId, domains;
		find(classifiedList, i, myLine2);
		Skip tmp = mySplit(myLine2, ";", true);
		find(tmp, 0, csvId);
		find(tmp, 1, domains);
		
		if (objId == csvId) {
			Skip split = mySplit(domains, ",", false);
			string dom;
			for dom in split do {
				if (length(dom) > 0) {
					o."REQ Domain" += dom;
				}
			}
			delete(split);
		} else {
			print "ID missmatch: " objId " != " csvId "\n";
		}
		
		delete(tmp);
		i++;
	}
	
	print "Successfully updated " i " requirements.";
}
int endTotal = getTickCount_();

print "    took " (endTotal-startTotal) " ms\n";